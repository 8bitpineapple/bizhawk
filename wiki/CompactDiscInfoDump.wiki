#summary A concise explanation of compact disc CDs, gathered for the first time EVER in one location

= Introduction =

While researching the topic of compact disc and disc image formats, we discovered that information is scattered, hard to understand, frequently wrong, and occasionally missing altogether (although perhaps implied by a very careful analysis of specs). Out of fear for ourselves forgetting what we discovered and finding it difficult to reconstruct later, as well as out of pure generosity, we decided to write it all down.

The notes contained herein may be WRONG and are probably not even FINISHED. Furthermore, it may use NON-STANDARD terminology, in areas where existing terminology was inconsistent or inadequate. Furthermore, it may say things to which there are exceptions (and the exceptions will be added later as they are discovered or reported) for purposes of laying down clear rules which we have judged to be adequate for our purposes purposes. While one might be interested in discs which violate some standards, we do not think we encounter any of those and so when something is defined such that it MUST be that way, we assume that it will in fact be. Of course, a bit of assertion checking here and there is probably wise.

These notes are limited in scope to COMPACT DISCS. CDRs may be different in some ways. Furthermore, MULTISESSION discs have not yet been contemplated, as well as a host of other less usual extensions.

The context of this document is emulation of compact discs for PCE-CD, Saturn, and Playstation emulators. This includes whatever is necessary to process and access disc image files, but nothing that is related to extracting or burning them, which is a sloppiness best left for hydrogenaudio or the like.

= Definitions =

Compact Disc, CD, and disc, are three terms used pretty interchangeably here.

Subcode and Sub-channel are used almost interchangeably, although Subcode relates more to the concept and Sub-channel refers to a specific data channel contained in the subcode.

ABA is made up by us. It is an Absolute Block Address. AKA, the address of a sector, starting from sector 0--the very beginning of a BIN file, and the start of the "user data area" of the disc following the lead-in.

LBA is a Logical Block Address. *This numbering is defined as either starting from track 1, index 1, or from ABA 150. We are not sure which, yet.*

MSF is a timestamp format. It is different from a Block Address, but each one is the same size as a Block Address and they could be easily converted. It can range from [00/00/00 , 59/59/74]. MSF are stored on the disc in a one-byte, two digit BCD format.

Absolute MSF is the ABA in MSF form.

Relative LBA is the LBA relative to the start of a track (index 1). Within a track's pregap, the relative LBA is negative.

Relative MSF is the Relative LBA in MSF form. While you may consider it to be logically negative just like the corresponding relative LBA, it will be stored on the disc as positive.

a Blob is a source datafile within a cue/toc file. This word was chosen because 'data source', 'datafile', and 'file' were too long and/or confusing. *We may rename this concept to DataFile, as that is what .TOC calls it*

= Disc Format =

ECMA-130 is a useful doc. X3T10/1048D "SCSI-3 Multimedia Commands" ("mmc-r10a") is a useful doc.

Consult table 1 of mmc-r10a.

A disc begins with a lead-in. This lead-in is of unknown length. CD devices autonomously read this area while acquiring the disc to read the TOC. CD devices do not provide user access to this area. Therefore, this area does not exist in any image file formats and it does not need to be emulated. It is not addressable by any protocols and the disc addressing does not include it. Just so you know, the TOC is contained in the Q subchannel and that is how discs acquire it. But this information does you no good. Ignore the lead-in.

The first track always contains a pregap of at least 2 seconds. There are rules governing pregaps and postgaps around data tracks. Those are not written here yet. They are not very interesting to us, except insofar as pregaps and postgaps may occasionally appear indistinguishable in various situations.

== More details on Lead-in ==

The Q subchannel entries in the lead-in area are coded as track 0, index 0. This sort of makes sense, since it is before track 1.

= CUE Format (CUE+BIN) =

This is a good reference for CUE files: http://digitalx.org/cue-sheet/

The first rule of CUE files is that all timestamps are relative to the current blob. At any given point in a cue file, it is not readily apparent where you are on the disc unless you think about it really hard.

A cue file must not contain an entry for track 1, index 0. This is because the CD spec mandates 2 seconds minimum here. If you want additional pregap, you must use a PREGAP command.

Information regarding cue commands can be found at the digitalx.org URL. What follows are notes or reinforcements. 

A PREGAP command causes zeros to be emitted to the disc, without consuming data from the current blob. It can be mixed with a INDEX 00 command. *In this case it is not clear where the previous track ends or where this track starts. Bizhawk does not cope with it yet*

A POSTGAP command causes zeros to be emitted to the disc, without consuming data from the current blob. 

= .TOC format (TOC+BIN) =

.TOC format is made by the cdrdao program. Despite having a high quality Windows port, cdrdao seems almost solely used by linux folks. As a consequence, there is very little support for this format among Windows tools.

Mysteries:
.TOC may start with CD_DA or CD_ROM. Differences?

the .TOC contains entries like this: TRACK data_mode subcode_mode.
The track will consume data from the specified DATAFILE in blocks consisting of 2048/2336/2352/etc user data, followed by some bytes of subcode data. For instance, "TRACK MODE1_RAW RW_RAW" will result in 2352+96 bytes per block, a 2352 byte userdata sector plus 96 bytes of all 8 subchannels R-W. This pattern is repeated.

= .CCD format =

The .sub file appears to be 96 bytes per sector but is not the same format as .TOC's RW_RAW. What is it?

= BIZHAWK format =

Right now, BizHawk prefers to write cue+bin files. The bin files will always be 2352 byte sectors, and subcode is unavailable.

For the future, .TOC+BIN would be superior, but it is inconvenient since windows tools do not support it and we do not yet load .TOC files.